'MacroName:KoreanName
'MacroDescription:Convert a field using the ScriptShifter utility
'Macro written by: Thomas Ventimiglia, Princeton University East Asian Library 
'Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
'You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
'Results are derived from the ScriptShifter utility (https://bibframe.org/scriptshifter/)
'Macro Created: 17 April 2025
'Macro last modified: 17 April 2025
'Macro version: 0.1.3

Global Const sDefaultJSON = "{""lang"":""korean_names"",""capitalize"":""first"",""t_dir"":""s2r"",""options"":{}}"
Global Const sScriptShifterURL = "https://bibframe.org/scriptshifter/"
Global Const sTransEndpoint = "trans"

Declare Function ReplaceAll(sStr As String, sFind As String, sReplace as String) As String
Declare Function ConvertHTMLEntities(sStr As String) As String
Declare Function ConvertUnicodeEntities(sStr As String) As String
Declare Function ConvertMARC8(sStr As String) As String
Declare Function GetUnicodeSubstring(sStr As String, iStart As Integer, iLength As Integer) As String
Declare Function QueryScriptShifter(sReqJSON As String) As String

Sub Main

   ReDim arrNumDig(0)
   ReDim arrNumStr(0)

   Dim CS As Object
   On Error Resume Next
   Set CS  = GetObject(,"Connex.Client")
   On Error GoTo 0
   If CS  Is Nothing Then
      Set CS  = CreateObject("Connex.Client")
   End If
   sSelection = ""
   startSpace = ""
   endSpace = ""
   sTitle = "Convert Korean Names"
   
   Dim pinyin As Integer

   CS.SendKeys "",-1
   CS.SendKeys "^c",-1
   CS.CopySelected
      
   iSelRow = CS.CursorRow
   iSelCol = CS.CursorColumn
   iSelLen = Len(Clipboard.GetText)

   If iSelLen = 0 Then
      MsgBox "No text selected",0,sTitle
      Exit Sub
   End If   
   
   CS.GetFieldLineUnicode iSelRow,sSelection
   sSelection = GetUnicodeSubstring(sSelection,iSelCol,iSelLen)

   'If selection starts or ends with a space, strip it and add it back in later.
   If Left(sSelection,1) = " " Then
      startSpace = " "
      sSelection = Mid(sSelection,2)
   End If
   If Right(sSelection,1) = " " Then
      endSpace = " "
      sSelection = Left(sSelection,Len(sSelection)-1)
   End If
   
   sSelection = ReplaceAll(sSelection,Chr(34),"\" & Chr(34))
   sSelection = ConvertHTMLEntities(sSelection) 
   sSelection = ConvertMARC8(sSelection) 

   sReqJSON = ReplaceAll(sDefaultJSON, "{""lang","{""text"":""" & sSelection & """,""lang")
   sRomanName = QueryScriptShifter(sReqJSON)
   sRomanName = ConvertUnicodeEntities(sRomanName)
   sReqJSON = ReplaceAll(sReqJSON,"korean_names", "korean_nonames")
   sRomanNormal = QueryScriptShifter(sReqJSON)
   sRomanNormal = ConvertUnicodeEntities(sRomanNormal)
   
   If sRomanName = sRomanNormal Then
      Exit Sub
   End If
   
   nStart = CS.CursorColumn
   nEnd = nStart + Len(sSelection)
   nLine = CS.CursorRow
   nNextLine = nLine + 1
   'The parallel field must appear right above the Romanized field and have the same tag.
   
   If Len(sSelection) = 0 Then
      MsgBox "No text selected",0,sTitle
      Exit Sub
   End If
   
   
   Dim sCharField As string
   bSuccess = CS.GetFieldLineUnicode(nLine, sCharField)
   
   Dim sRomanField As String
   CS.CursorRow = nNextLine
   CS.CursorColumn = 999
   CS.Paste   
   
   If CS.GetFieldLineUnicode(nNextLine, sRomanField) = False Then
      MsgBox "No parallel field",0,sTitle
      Exit Sub
   End If
   If Left(sRomanField, 3) <> Left(sCharField, 3) Then
      MsgBox "No parallel field",0,sTitle
      Exit Sub
   End If

   sRomanField = ReplaceAll(sRomanField,sRomanNormal,sRomanName)
   For i = 1 to iSelLen
      If Mid(sRomanField,Len(sRomanField),1) = ";" Then
         If Len(sRomanField) > 8 And Mid(sRomanField,Len(sRomanField)-7,3) = "&#x" Then
            sRomanField = Left(sRomanField,Len(sRomanField)-8)
         Else
            sRomanField = Left(sRomanField,Len(sRomanField)-1)
         End If
      Else
         sRomanField = Left(sRomanField,Len(sRomanField)-1)
      End If
   Next i
   
   CS.SetFieldLine nNextLine,sRomanField
   
End Sub

Function QueryScriptShifter(sReqJSON As String) As String
   Dim oHTTP As Object
   Set oHTTP = CreateObject("WinHttp.WinHttpRequest.5.1")
   oHTTP.Open "POST", sScriptShifterURL & sTransEndpoint, False
   oHTTP.SetRequestHeader "Content-Type", "application/json"
   oHTTP.Send(sReqJSON)
   sResponse = oHTTP.ResponseText
   sResponse = ReplaceAll(sResponse,"{""output"":""","")
   sResponse = Left(sResponse,InStr(1,sResponse,""",""warnings")-1)
   sResponse = ReplaceAll(sResponse, Chr(10),"")
   sResponse = ReplaceAll(sResponse, "\" & Chr(34), Chr(34))
   
   'TEMPORARY: Convert Korean precomposed vowels to decomposed
   sResponse = ReplaceAll(sResponse,"\u014e","O\u0306")      
   sResponse = ReplaceAll(sResponse,"\u014f","o\u0306")   
   sResponse = ReplaceAll(sResponse,"\u016c","U\u0306")   
   sResponse = ReplaceAll(sResponse,"\u016d","u\u0306")   
   
   QueryScriptShifter = sResponse
End Function

Function GetUnicodeSubstring(sStr As String, iStart As Integer, iLength As Integer) As String
   iStrLen = Len(sStr)
   iActualPos = 1
   iActualLen = 0
   sSubstring = ""
   sChar = ""
   bInEntity = False
   For i = 1 to iStrLen
      If Mid(sStr,i,3) = "&#x" Then
         bInEntity = True
      ElseIf Mid(sStr,i,1) = ";" Then
         bInEntity = False
      End If
      If iActualPos >= iStart And iActualLen < iLength Then
         sSubstring = sSubstring & Mid(sStr,i,1)
         If Not bInEntity Then
            iActualLen = iActualLen + 1
         End If
      End If
      If Not bInEntity Then
         iActualPos = iActualPos + 1
      End If
   Next i
   GetUnicodeSubstring = sSubstring
End Function


Function ConvertMARC8(sStr As String) As String
   sStr = ReplaceAll(sStr,Chr(136), "\u0098") 
   sStr = ReplaceAll(sStr,Chr(137), "\u009C") 
   sStr = ReplaceAll(sStr,Chr(141), "\u200D") 
   sStr = ReplaceAll(sStr,Chr(142), "\u200C") 
   sStr = ReplaceAll(sStr,Chr(161), "\u0141") 
   sStr = ReplaceAll(sStr,Chr(162), "\u00D8") 
   sStr = ReplaceAll(sStr,Chr(163), "\u0110") 
   sStr = ReplaceAll(sStr,Chr(164), "\u00DE") 
   sStr = ReplaceAll(sStr,Chr(165), "\u00C6") 
   sStr = ReplaceAll(sStr,Chr(166), "\u0152") 
   sStr = ReplaceAll(sStr,Chr(167), "\u02B9") 
   sStr = ReplaceAll(sStr,Chr(168), "\u00B7") 
   sStr = ReplaceAll(sStr,Chr(169), "\u266D") 
   sStr = ReplaceAll(sStr,Chr(170), "\u00AE") 
   sStr = ReplaceAll(sStr,Chr(171), "\u00B1") 
   sStr = ReplaceAll(sStr,Chr(172), "\u01A0") 
   sStr = ReplaceAll(sStr,Chr(173), "\u01AF") 
   sStr = ReplaceAll(sStr,Chr(174), "\u02BC") 
   sStr = ReplaceAll(sStr,Chr(176), "\u02BB") 
   sStr = ReplaceAll(sStr,Chr(177), "\u0142") 
   sStr = ReplaceAll(sStr,Chr(178), "\u00F8") 
   sStr = ReplaceAll(sStr,Chr(179), "\u0111") 
   sStr = ReplaceAll(sStr,Chr(180), "\u00FE") 
   sStr = ReplaceAll(sStr,Chr(181), "\u00E6") 
   sStr = ReplaceAll(sStr,Chr(182), "\u0153") 
   sStr = ReplaceAll(sStr,Chr(183), "\u02BA") 
   sStr = ReplaceAll(sStr,Chr(184), "\u0131")
   sStr = ReplaceAll(sStr,Chr(185), "\u00A3")
   sStr = ReplaceAll(sStr,Chr(186), "\u00F0") 
   sStr = ReplaceAll(sStr,Chr(188), "\u01A1") 
   sStr = ReplaceAll(sStr,Chr(189), "\u01B0")
   sStr = ReplaceAll(sStr,Chr(192), "\u00B0") 
   sStr = ReplaceAll(sStr,Chr(193), "\u2113") 
   sStr = ReplaceAll(sStr,Chr(194), "\u2117") 
   sStr = ReplaceAll(sStr,Chr(195), "\u00A9") 
   sStr = ReplaceAll(sStr,Chr(196), "\u266F") 
   sStr = ReplaceAll(sStr,Chr(197), "\u00BF") 
   sStr = ReplaceAll(sStr,Chr(198), "\u00A1") 
   sStr = ReplaceAll(sStr,Chr(199), "\u00DF") 
   sStr = ReplaceAll(sStr,Chr(200), "\u20AC")  
   sStr = ReplaceAll(sStr,Chr(224), "\u0309")  
   sStr = ReplaceAll(sStr,Chr(225), "\u0300")  
   sStr = ReplaceAll(sStr,Chr(226), "\u0301")  
   sStr = ReplaceAll(sStr,Chr(227), "\u0302")  
   sStr = ReplaceAll(sStr,Chr(228), "\u0303")  
   sStr = ReplaceAll(sStr,Chr(229), "\u0304")  
   sStr = ReplaceAll(sStr,Chr(230), "\u0306")  
   sStr = ReplaceAll(sStr,Chr(231), "\u0307")  
   sStr = ReplaceAll(sStr,Chr(232), "\u0308")  
   sStr = ReplaceAll(sStr,Chr(233), "\u030C")  
   sStr = ReplaceAll(sStr,Chr(234), "\u030A")  
   sStr = ReplaceAll(sStr,Chr(235), "\u0361")  
   sStr = ReplaceAll(sStr,Chr(236), "")  
   sStr = ReplaceAll(sStr,Chr(237), "\u0315")  
   sStr = ReplaceAll(sStr,Chr(238), "\u030B")  
   sStr = ReplaceAll(sStr,Chr(239), "\u0310")   
   sStr = ReplaceAll(sStr,Chr(240), "\u0327") 
   sStr = ReplaceAll(sStr,Chr(241), "\u0328") 
   sStr = ReplaceAll(sStr,Chr(242), "\u0323") 
   sStr = ReplaceAll(sStr,Chr(243), "\u0324") 
   sStr = ReplaceAll(sStr,Chr(244), "\u0325") 
   sStr = ReplaceAll(sStr,Chr(245), "\u0333") 
   sStr = ReplaceAll(sStr,Chr(246), "\u0332") 
   sStr = ReplaceAll(sStr,Chr(247), "\u0326") 
   sStr = ReplaceAll(sStr,Chr(248), "\u031C") 
   sStr = ReplaceAll(sStr,Chr(249), "\u032E") 
   sStr = ReplaceAll(sStr,Chr(250), "\u0360") 
   sStr = ReplaceAll(sStr,Chr(251), "")
   sStr = ReplaceAll(sStr,Chr(254), "\u0313") 

   ConvertMARC8 = sStr
End Function

Function ConvertHTMLEntities(sStr As String) As String
   iPos = InStr(1,sStr,"&#x")
   While iPos > 0
      sStr = Left(sStr,iPos-1) & "\u" & Mid(sStr,iPos+3,4) & Mid(sStr,iPos+8)   
      iPos = InStr(1,sStr,"&#x") 
   Wend
   ConvertHTMLEntities = sStr
End Function

Function ConvertUnicodeEntities(sStr As String) As String
   iPos = InStr(1,sStr,"\u")
   While iPos > 0
      sStr = Left(sStr,iPos-1) & "&#x" & UCase(Mid(sStr,iPos+2,4)) & ";" & Mid(sStr,iPos+6)  
      iPos = InStr(1,sStr,"\u") 
   Wend
   ConvertUnicodeEntities = sStr
End Function

Function ReplaceAll(sStr As String, sFind As String, sReplace As String) As String
   place = 1
   If InStr(place, sStr, sFind) Then
      Do While InStr(place, sStr, sFind)
          place = InStr(place, sStr, sFind)
          sStr = Left(sStr, place - 1) & sReplace & Mid(sStr, place + Len(sFind))
          place = place + Len(sReplace)
      Loop
   End If
   ReplaceAll = sStr
End Function

