'MacroName:Convert
'MacroDescription:Convert a field using the ScriptShifter utility
'Macro written by: Thomas Ventimiglia, Princeton University East Asian Library 
'Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
'You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
'Macro Created: 17 April 2025
'Macro last modified: 30 September 2025
'Macro version: 0.2.0

Declare Function ReplaceAll(sStr As String, sFind As String, sReplace as String) As String
Declare Function ValidateField(sStr As String) As String
Declare Function GetHexCode(sStr As String)
Declare Function ConvertHTMLEntities(sStr As String) As String
Declare Function ConvertLatin1(sStr As String) As String
Declare Function GetJSONField(sJSON As String, sField As String) As String
Declare Function AdjustKorLangCode(sJSON As String, bIsName) As String
Declare Sub GetLanguageList(ByRef aLangTable$())
Declare Function IsRomanized(sString As String) As Integer

Global Const sSettingsFilename = "ScriptShifter.Settings.json"
Global Const sScriptShifterURL = "https://bibframe.org/scriptshifter/"
Global Const sLangEndpoint = "languages"
Global Const sTransEndpoint = "trans"

Sub Main
   Dim CS As Object
   On Error Resume Next
   Set CS = GetObject( , "Connex.Client" )
   On Error GoTo 0
   If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )
   ChDir Environ("AppData") & "\OCLC\Connex\Macros"
   On Error GoTo MakeFile
ReadJSON:
   sJSON = ""
   Open sSettingsFilename For Input As #1
   While Not EOF(1)
      sChar = Input$(1,#1)
      sJSON = sJSON & sChar
   Wend
   sCfgLang = GetJSONField(sJSON,"lang")
   sCfgCapitalization = GetJSONField(sJSON, "capitalize")
   sCfgDirection = GetJSONField(sJSON, "t_dir")
   sCfgAutoSelect = GetJSONField(sJSON, "autoselect")
   Close #1
   On Error Resume Next
   Dim aLangTable$()
   Call GetLanguageList(aLangTable$)
   Goto Convert
MakeFile:
   CS.RunMacro("ScriptShifter!Settings")
   Goto ReadJSON:
Convert:

   sDelimiter = Chr(31)

   Dim sField As String           

   'Insert BOM at end of field to force all Unicode to appear as numeric entities
   CS.EndCell
   CS.InsertText("&#xFEFF;")

   bool = CS.GetFieldLineUnicode(CS.CursorRow, sField)
   If bool = FALSE Then
      MsgBox "Not viewing a MARC record. Exiting..."
      Exit Sub
   End If
   
   'Replace EOP character in indicator fields with period
   sField = ReplaceAll(sField, "&#x220E;",".")

   'Convert subfield Delimiter to ASCII 1F
   sField = ReplaceAll(sField, "&#x01C2;",sDelimiter)

   'Remove BOM
    sField = ReplaceAll(sField, "&#xFEFF;","")
  
   sOriginalField = sField
   
   'Pull the tag name and indicators
   NewField = Left(sField, 5)
   sTag = Left(NewField, 3)
   'The text of the field
   sField = Mid(sField, 6)
   sConvertedFields = ""

   sLangCode = ""
   If sCfgAutoSelect = "true" Then
      sLangMARC = ""
      bSuccess = CS.GetFixedField("Lang",sLangMARC)
      sLangLength = 99
      For i = 0 to UBound(aLangTable)
         If (InStr(1,aLangTable(i,2),sLangMARC) > 0) And (Len(aLangTable(i,2)) < sLangLength) Then
            sLangLength = Len(aLangTable(i,2))
            sLangCode = aLangTable(i,1)
         End If   
      Next i   
   End if
   If sLangCode <> "" Then
      sJSON = ReplaceAll(sJSON,sCfgLang,sLangCode)
   End If

   bFieldHasNonRoman = IsRomanized(ConvertHTMLEntities(sField))

   Do
      sCurrentSubfield = sField
      iDelimPos = InStr(2,sField,sDelimiter)
      If iDelimPos > 0 Then
        sCurrentSubfield = Left(sField,iDelimPos-1)
        sField = Mid(sField,iDelimPos)
      End If
   
     
      sSubfieldTag = ""
      If Left(sCurrentSubfield,1) = sDelimiter Then
         sSubfieldTag = Mid(sCurrentSubfield,2,1)
         sCurrentSubfield = Mid(sCurrentSubfield,3)
      End If


      sSuffix = ""
      sLastChar = Mid(sCurrentSubfield,Len(sCurrentSubfield))
      Do While (sLastChar = " ") Or (sLastChar = ":") Or (sLastChar = ";" And Mid(sCurrentSubfield,Len(sCurrentSubfield)-1,1) = " ")
         sSuffix = sLastChar & sSuffix
         sCurrentSubfield = Left(sCurrentSubfield,Len(sCurrentSubfield)-1)
         sLastChar = Mid(sCurrentSubfield,Len(sCurrentSubfield))

      Loop
      
      If sSubfieldTag >= "0" And sSubfieldTag <= "9" Then
         sResponse = sCurrentSubfield
         GoTo AppendResponse            
      End If   
 
      sCurrentSubfield = ReplaceAll(sCurrentSubfield,Chr(34),"\" & Chr(34))
      sCurrentSubfield = ConvertHTMLEntities(sCurrentSubfield) 
     
      bIsName = False
      If (sTag = "100" Or sTag = "600" Or sTag = "700" or sTag = "800") And (sSubfieldTag = "a" Or sSubfieldTag = "") Then
            bIsName = True
      End If
      If InStr(1,sJSON,"korean") Then
         sJSON = AdjustKorLangCode(sJSON,bIsName)
      End If
   
      Dim oHTTP As Object
      Set oHTTP = CreateObject("WinHttp.WinHttpRequest.5.1")
      Dim sReqJSON As String
      sReqJSON = sJSON
      sReqJSON = ReplaceAll(sReqJSON, "{""lang","{""text"":""" & sCurrentSubfield & """,""lang")

      If InStr(1,sReqJSON,Chr(34) & "t_dir" & Chr(34) & ":" & Chr(34) & "auto") > 0 Then 
         If bFieldHasNonRoman Then
            sReqJSON = ReplaceAll(sReqJSON,Chr(34) & "auto" & Chr(34),Chr(34) & "r2s" & Chr(34))
         Else
            sReqJSON = ReplaceAll(sReqJSON,Chr(34) & "auto" & Chr(34),Chr(34) & "s2r" & Chr(34))
         End If
      End If
      'TEMPORARY: If s2r, Skip subfields that do not contain Unicode entities (i.e. likely already romanized)
      If InStr(1,sJSON,"s2r") > 0 And InStr(1,sCurrentSubfield,"\u") = 0 Then
         sResponse = sCurrentSubfield
         GoTo AppendResponse            
      End If

      oHTTP.Open "POST", sScriptShifterURL & sTransEndpoint, False
      oHTTP.SetRequestHeader "Content-Type", "application/json"
      oHTTP.Send(sReqJSON)

      sResponse = oHTTP.ResponseText
      sResponse = ReplaceAll(sResponse,"{""output"":""","")
      sResponse = Left(sResponse,InStr(1,sResponse,""",""warnings")-1)
      sResponse = ReplaceAll(sResponse, Chr(10),"")
      sResponse = ReplaceAll(sResponse, "\" & Chr(34), Chr(34))
   
      If Trim(LCase(sResponse)) = Trim(LCase(sCurrentSubfield)) Then
         sResponse = sCurrentSubfield
         GoTo AppendResponse
      End If   
   
      'Special name formatting
      If bIsName And InStr(1,sJSON,"korean_names") > 0 Then
        iSpacePos = InStr(1,sResponse," ")
        If iSpacePos > 0 Then
         sResponse = Left(sResponse,iSpacePos-1) & "," & Mid(sResponse,iSpacePos)
        End If
      End If
   
      iIndexLoc = Instr(1,sResponse,"\u") 
      While(iIndexLoc > 0)
         sResponse = Left(sResponse,iIndexLoc-1) & "&#x" & Mid(sResponse,iIndexLoc+2,4) & ";" & Mid(sResponse,iIndexLoc+6)
         iIndexLoc = Instr(1,sResponse,"\u") 
      Wend
      
AppendResponse:
      'TEMPORARY: Convert precomposed vowels to decomposed
      'Korean
      sResponse = ReplaceAll(sResponse,"&#x014e;","O&#x0306;")      
      sResponse = ReplaceAll(sResponse,"&#x014f;","o&#x0306;")   
      sResponse = ReplaceAll(sResponse,"&#x016c;","U&#x0306;")   
      sResponse = ReplaceAll(sResponse,"&#x016d;","u&#x0306;") 
      'Uighur
      sResponse = ReplaceAll(sResponse,"&#x0102;","A&#x0306;")   
      sResponse = ReplaceAll(sResponse,"&#x0103;","a&#x0306;") 
      sResponse = ReplaceAll(sResponse,"&#x00d6;","O&#x0308;") 
      sResponse = ReplaceAll(sResponse,"&#x00f6;","o&#x0308;") 
      sResponse = ReplaceAll(sResponse,"&#x00dc;","U&#x0308;") 
      sResponse = ReplaceAll(sResponse,"&#x00fc;","u&#x0308;") 
      'Greek (remove stress marks, convert "O" to "Ho"
      If InStr(1, sReqJSON, "greek") > 0 And InStr(1,sReqJSON,"s2r") > 0 Then
         sResponse = ReplaceAll(sResponse, "O ","Ho ")
         sResponse = ReplaceAll(sResponse,"&#x0301;","")
      End If


      If sSubfieldTag <> "" Then
         sResponse = "&#x01C2;" & sSubfieldTag & " " & Trim(sResponse)
      End If
      sResponse = Trim(sResponse) & sSuffix
      sConvertedFields = sConvertedFields & sResponse
   Loop While iDelimPos > 0
   
   errors = ValidateField(NewField)
   If Len(errors) > 0 Then
      MsgBox(errors)
   End If
      
  'Restore EOP characters to tag and indicator fields
  i = 5
  Do While(i > 0)
     If(Mid(NewField,i,1) = ".") Then
         NewField = Left(NewField,i-1) & "&#x220E;" & Mid(NewField,i+1)
     End If
     i = i - 1
  Loop

  
  If InStr(1,sReqJSON,"s2r") > 0 Then
     bool = CS.AddFieldLine(CS.CursorRow + 1, NewField & sConvertedFields)
  Else
     bool = CS.SetFieldLine(CS.CursorRow, NewField & sConvertedFields)
     sOriginalField = ConvertLatin1(sOriginalField)
     bool = CS.AddFieldLine(CS.CursorRow + 1, sOriginalField)
  End If

  CS.CursorRow = CS.CursorRow -1
  CS.SendKeys "", -1
  CS.SendKeys "%(ekl)", -1
End Sub

Function AdjustKorLangCode(sJSON As String, bIsName) As String
   If bIsName = True Then
      sJSON = ReplaceAll(sJSON,"korean_nonames","korean_names")
   Else
      sJSON = ReplaceAll(sJSON,"korean_names","korean_nonames")
   End If
   AdjustKorLangCode = sJSON
End Function 

Function ValidateField(sStr As String) As String
   nLen = Len(sStr)
   sResult = ""
   pos = 1
   For i = 6 to nLen
      If Mid(sStr,i,8) Like "&[#]x[0-9A-F][0-9A-F][0-9A-F][0-9A-F];" Then
         sNum = Mid(sStr,i,8)
         nNum = GetHexCode(sNum)
         i = i + 7
      Else
         nNum = Asc(Mid(sStr,i,1))
         sNum = Val(nNum)        
      End If
      If Not((nNum > 0 And nNum < &H00FF&) Or nNum = &H0110& Or nNum = &H0111& Or nNum = &H0131& Or nNum = &H0141& Or nNum = &H0142& Or nNum = &H0152& Or nNum = &H0153& Or nNum = &H0300& Or nNum = &H0301& Or nNum = &H0302& Or nNum = &H0303& Or nNum = &H0304& Or nNum = &H0306& Or nNum = &H0307& Or nNum = &H0308& Or nNum = &H0309& Or nNum = &H0310& Or nNum = &H0313& Or nNum = &H0315& Or nNum = &H0323& Or nNum = &H0324& Or nNum = &H0325& Or nNum = &H0326& Or nNum = &H0327& Or nNum = &H0328& Or nNum = &H0332& Or nNum = &H0333& Or nNum = &H2113& Or nNum = &H2117& Or nNum = &H00A1& Or nNum = &H00A3& Or nNum = &H00A9& Or nNum = &H00AE& Or nNum = &H00B0& Or nNum = &H00B1& Or nNum = &H00B7& Or nNum = &H00BF& Or nNum = &H00C6& Or nNum = &H00D8& Or nNum = &H00DE& Or nNum = &H00DF& Or nNum = &H00F0& Or nNum = &H00F8& Or nNum = &H00FE& Or nNum = &H01A0& Or nNum = &H01A1& Or nNum = &H01AF& Or nNum = &H01B0& Or nNum = &H02B9& Or nNum = &H02BA& Or nNum = &H02BB& Or nNum = &H02BC& Or nNum = &H030A& Or nNum = &H030B& Or nNum = &H030C& Or nNum = &H031C& Or nNum = &H032E& Or nNum = &H266D& Or nNum = &H266F& Or nNum = &HFE20& Or nNum = &HFE21& Or nNum = &HFE22& Or nNum = &HFE23& Or nNum = &H01C2&) Then
         sResult = sResult & "Invalid character in result at position " & pos
         sResult = sResult & ": x" & Hex(nNum) & chr(10)
      End If
      pos = pos + 1
   Next i
   ValidateField = sResult
End Function

Function ReplaceAll(sStr As String, sFind As String, sReplace As String) As String
   place = 1
   If InStr(place, sStr, sFind) Then
      Do While InStr(place, sStr, sFind)
          place = InStr(place, sStr, sFind)
          sStr = Left(sStr, place - 1) & sReplace & Mid(sStr, place + Len(sFind))
          place = place + Len(sReplace)
      Loop
   End If
   ReplaceAll = sStr
End Function

Function GetHexCode(sChar As String) as Long
   sHex = Mid(sChar, 4, 4)
   nHex = Val("&H" & sHex & "&")
   If nHex < 0 Then
      nHex = nHex + &HFFFF& + 1
   End If
   GetHexCode = nHex 
End Function

Function ConvertLatin1(sStr As String) As String
   For i = 128 to 255
      sStr = ReplaceAll(sStr, Chr(i), "&#x" & Hex(i) & ";")
   Next i
   ConvertLatin1 = sStr
End Function

Function ConvertHTMLEntities(sStr As String) As String
   iPos = InStr(1,sStr,"&#x")
   While iPos > 0
      sStr = Left(sStr,iPos-1) & "\u" & Mid(sStr,iPos+3,4) & Mid(sStr,iPos+8)   
      iPos = InStr(1,sStr,"&#x") 
   Wend
   ConvertHTMLEntities = sStr
End Function

Function GetJSONField(sJSON As String, sField As String) As String
   iLoc = InStr(1,sJSON, Chr(34) & sField & Chr(34))
   sStr = sJSON
   If iLoc > 0 Then
      sStr = Mid(sStr,iLoc+Len(sField)+4)
      sStr = Left(sStr,InStr(1,sStr,Chr(34))-1)
      GetJSONField = sStr
   Else
      GetJSONField = ""
   End If
End Function

Sub GetLanguageList(ByRef aLangTable$())
   Dim oHTTP As Object
   Set oHTTP = CreateObject("WinHttp.WinHttpRequest.5.1")
   
   sURL = sScriptShifterURL & sLangEndpoint
   
   oHTTP.Open "GET", sURL, False
   oHTTP.SetRequestHeader "Content-Type", "application/json"
   oHTTP.Send
   
   sResponse = oHTTP.ResponseText
   
   iNextPos = InStr(1,sResponse,"},")
   iCount = 0
   While iNextPos > 0 
      iCount = iCount+1
      iNextPos = InStr(iNextPos+1,sResponse,"},")
   Wend
   
   ReDim aLangList(iCount)
   ReDim aLangTable(iCount,3)
   
   iCount = 0
   Do 
      sCurrentLang = sResponse
      If iNextPos > 0 Then
         sCurrentLang = Left(sResponse,iNextPos)
         sResponse = Mid(sResponse,iNextPos+1)
      End If
      sCurrentLang = Mid(sCurrentLang, InStr(1,sCurrentLang,Chr(34))+1)
      sDetails = Mid(sCurrentLang, InStr(1, sCurrentLang, "{"))
      sCurrentLang = Left(sCurrentLang, InStr(1,sCurrentLang, Chr(34))-1)
      
      sLabel = sDetails
      sLabel = Mid(sLabel,InStr(1,sLabel,"""label"":""")+9)
      sLabel = Left(sLabel,InStr(1,sLabel,Chr(34))-1)
      
      sMARC = sDetails
      sMARC = Mid(sMARC,InStr(1,sMARC,"""marc_code"":""")+13)
      sMARC = Left(sMARC,InStr(1,sMARC,Chr(34))-1)
      
      aLangList(iCount) = sLabel
      aLangTable(iCount,0) = sLabel
      aLangTable(iCount,1) = sCurrentLang
      aLangTable(iCount,2) = sMARC
      iCount = iCount + 1
      iNextPos = InStr(1,sResponse,"},")
   Loop While iNextPos > 0
End Sub

Function IsRomanized(sString As String) As Integer
   IsRomanized = True
   iPos = 1
   While iPos > 0 
      iPos = iPos + 1
      iPos = InStr(iPos,sString,"\u")
      If iPos > 0 Then
         sCode = Mid(sString,iPos+2,4)
         If sCode >= "0370" Then
            IsRomanized = False
         End If
      End If  
   Wend
End Function
